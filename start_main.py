# ------------------------------------- Code description -------------------------------------1

'''
        Trigger module - will trigger the main code, and it will be surrounded by time-recorder 
'''

# ------------------------------------- Code description -------------------------------------2

# CORE 1        CORE 1        CORE 1        CORE 1        CORE 1        CORE 1        CORE 1


import time
import numpy as np
import os
from pathlib import Path

import heuristic_approach
import naive_approach



results_folder_name = ""



def get_initial_locations_2D(robots, goals, workSpace):     # Fetches initial location of robots and the goals

	all_start_loc = {}  # for robots
	all_goal_loc  = {}  # for tasks

	
	# print("\n-------------------------------------------------------------------")
	# print("-----------Fetching input for robots' initial locations------------")
	# print("-------------------------------------------------------------------\n")
	

	i = 0
	
	while ( i < len(robots) ):

		a = np.random.randint(0, len(workSpace))
		b = np.random.randint(0, len(workSpace[0]))
		aa = (a, b)

		if aa in all_start_loc.values():  # two robots cannot have same start loc
			continue
		
		if aa[0] > (len(workSpace) - 1) or aa[0] < 0 or aa[1] > (len(workSpace[0]) - 1) or aa[1] < 0:
			# print("Input is out of bounds of workspace, please re-enter\n")
			continue  
		
		if workSpace[aa[0]][aa[1]] != 0:    # i.e. if obstacle is present, then it is not a valid cell
			# print("Invalid input! Obstacle is present; please re-enter\n")
			continue  

		all_start_loc[robots[i]] = aa
		i = i + 1
		# print("\n")
	# print("Fetching of initial locations of robots complete...")
	# print("-------------------------------------------------------------------\n")



	# print("-------------------------------------------------------------------")
	# print("--------------Fetching input for Goals' locations------------------")
	# print("-------------------------------------------------------------------\n")
	# print("\nTaking input for Goal locations (task locations): \n")
	i = 0
	while ( i < len(goals) ):

		a = np.random.randint(0, len(workSpace))
		b = np.random.randint(0, len(workSpace[0]))
		bb = (a, b)

		
		if bb in all_goal_loc.values():  # two robots cannot have same goal loc
			continue
		
		
		if bb in all_start_loc.values():  # goal loc and start loc cannot be same [NEW ADDITION]
			continue


		if bb[0] > (len(workSpace) - 1) or bb[0] < 0 or bb[1] > (len(workSpace[0]) - 1) or bb[1] < 0:
			# print("Input is out of bounds of workspace, please re-enter")
			continue  
		
		if workSpace[bb[0]][bb[1]] != 0:    # i.e. if obstacle is present, then it is not a valid cell
			# print("Invalid input! Obstacle is present; please re-enter")
			continue  
		
		all_goal_loc[goals[i]] = bb
		i = i + 1
		# print("\n")
	# print("Fetching of locations of goals complete...")
	# print("-------------------------------------------------------------------\n")
   


	return all_start_loc, all_goal_loc



def get_initial_locations_3D(robots, goals, workSpace):     # Fetches initial location of robots and the goals

	all_start_loc = {}  # for robots
	all_goal_loc  = {}  # for tasks

	
	# print("\n-------------------------------------------------------------------")
	# print("-----------Fetching input for robots' initial locations------------")
	# print("-------------------------------------------------------------------\n")
	
	# print("[Note]: locations can lie from ( 0, 0 ) up till (", len(workSpace) - 1, ", ", len(workSpace[0]) - 1, ")\n" )

	i = 0
	
	while ( i < len(robots) ):

		a = np.random.randint(0, workSpace.shape[0])
		b = np.random.randint(0, workSpace.shape[1])
		c = np.random.randint(0, workSpace.shape[2])
		aa = (a, b, c)

		if aa in all_start_loc.values():  # two robots cannot have same start loc
			continue
		
		if aa[0] > (workSpace.shape[0] - 1) or aa[0] < 0 or \
			aa[1] > (workSpace.shape[1] - 1) or aa[1] < 0 or \
			aa[2] > (workSpace.shape[2] - 1) or aa[2] < 0:
			# print("Input is out of bounds of workspace, please re-enter\n")
			continue  
		
		if workSpace[aa[0]][aa[1]][aa[2]] != 0:    # i.e. if obstacle is present, then it is not a valid cell
			# print("Invalid input! Obstacle is present; please re-enter\n")
			continue  

		all_start_loc[robots[i]] = aa
		i = i + 1
		# print("\n")
	# print("Fetching of initial locations of robots complete...")
	# print("-------------------------------------------------------------------\n")



	# print("-------------------------------------------------------------------")
	# print("--------------Fetching input for Goals' locations------------------")
	# print("-------------------------------------------------------------------\n")
	# print("\nTaking input for Goal locations (task locations): \n")
	i = 0
	while ( i < len(goals) ):

		a = np.random.randint(0, workSpace.shape[0])
		b = np.random.randint(0, workSpace.shape[1])
		c = np.random.randint(0, workSpace.shape[2])
		bb = (a, b, c)

		
		if bb in all_goal_loc.values():  # two robots cannot have same goal loc
			continue
		

		if bb in all_start_loc.values():  # goal loc and start loc cannot be same [NEW ADDITION]
			continue
		
		
		if bb[0] > (workSpace.shape[0] - 1) or bb[0] < 0 or \
			 bb[1] > (workSpace.shape[1] - 1) or bb[1] < 0 or \
			 bb[2] > (workSpace.shape[2] - 1) or bb[2] < 0:
			# print("Input is out of bounds of workspace, please re-enter")
			continue  
		
		if workSpace[bb[0]][bb[1]][bb[2]] != 0:    # i.e. if obstacle is present, then it is not a valid cell
			# print("Invalid input! Obstacle is present; please re-enter")
			continue  
		
		all_goal_loc[goals[i]] = bb
		i = i + 1
		# print("\n")
	# print("Fetching of locations of goals complete...")
	# print("-------------------------------------------------------------------\n")
   


	return all_start_loc, all_goal_loc




def get_workspace( ws_type, ws_l, ws_b, obs_den ):

	
	if (ws_type == 'random'):  # Random placement of obstacles

		workSpace = np.zeros((ws_l, ws_b))             
			
		no_of_obs = ( obs_den * ws_l * ws_b ) // 100
				

		i = 1
		obstacles = set()
		while i <= no_of_obs:
			a = np.random.randint(0, ws_l)
			b = np.random.randint(0, ws_b)

			if (a, b) not in obstacles:
				obstacles.add((a, b))
				workSpace[a][b] = 1
				i = i + 1
			

	elif (ws_type == 'replay'):	
		# workSpace = np.loadtxt( 'ws_2.txt', dtype = int, skiprows=0 )
		# workSpace = np.loadtxt( 'ws_100_50_100_20_r1.txt', dtype = int, skiprows=0 )
		workSpace = np.loadtxt( 'ws_100_100_100_20_r1.txt', dtype = int, skiprows=0 )
		# workSpace = np.loadtxt( 'ws_200_100_100_20_r1.txt', dtype = int, skiprows=0 )
		# workSpace = np.loadtxt( 'ws_100_200_200_20_r6.txt', dtype = int, skiprows=0 )
		# workSpace = np.loadtxt( 'ws_set_10_4_25_r1.txt', dtype = int, skiprows=0 )
		# workSpace = np.loadtxt( 'ws_100_300_300_20_r1.txt', dtype = int, skiprows=0 )
		# workSpace = np.loadtxt( 'benchmark_maps/benchmark4_Boston_0_256.txt', dtype = int, skiprows=0 )
		
	
	elif (ws_type == 'warehouse'):	
		workSpace = np.loadtxt( 'benchmark_maps/benchmark5_warehouse-20-40-10-2-1.txt', dtype = int, skiprows=0 ) 
	
	elif (ws_type == 'boston'):
		workSpace = np.loadtxt( 'benchmark_maps/benchmark4_Boston_0_256.txt', dtype = int, skiprows=0 ) 
	
	elif (ws_type == 'paris'):
		workSpace = np.loadtxt( 'benchmark_maps/Paris_1_256.txt', dtype = int, skiprows=0 )

	elif (ws_type == 'sydney'):
		workSpace = np.loadtxt( 'benchmark_maps/Sydney_0_256.txt', dtype = int, skiprows=0 )

	elif (ws_type == 'shanghai'):
		workSpace = np.loadtxt( 'benchmark_maps/Shanghai_2_256.txt', dtype = int, skiprows=0 )

	elif (ws_type == 'mansion'):
		workSpace = np.loadtxt( 'benchmark_maps/benchmark8_ht_mansion_n.txt', dtype = int, skiprows=0 ) 
	
	elif (ws_type == 'den'):
		workSpace = np.loadtxt( 'benchmark_maps/den520d.txt', dtype = int, skiprows=0 )
	
	elif (ws_type == '3D'):    # Configuring 3D workspace using a given configuration file
		
		with open('benchmark_maps/Complex.3dmap', 'r') as f:
    
			first_line = f.readline()
			first_line_split = first_line.split()
			

			workSpace = np.zeros((int(first_line_split[1]), int(first_line_split[2]), int(first_line_split[3])), dtype=int)
			
			
			for line in f:
				split_nos = line.split()
				workSpace[int(split_nos[0])][int(split_nos[1])][int(split_nos[2])] = 1


		f.close()
		xs,ys,zs = np.where(workSpace != 0) # main line 1
		workSpace = workSpace[min(xs):max(xs)+1,min(ys):max(ys)+1,min(zs):max(zs)+1]    # main line 2
		print("Reduced 3D workspace's shape: ", workSpace.shape)





	return workSpace






def execute_set( set_param ):

	
	global results_folder_name

	ws_type = set_param['ws_type']
	no_of_robots = set_param['n_o_r']
	no_of_goals = set_param['n_o_g']
	
	loop_no = 1
	total_loops = set_param['total_loops']
	verbosity = set_param['verbosity']
	
	collect_times_taken_H = []
	collect_times_taken_A = []
	
	collect_no_of_exp_H = []
	collect_no_of_exp_A = []

	collect_total_cost_H = []
	collect_total_cost_A = []
	

	log_grouped_data = open(results_folder_name + '1_grouped_data.txt', 'w')

	
	while ( loop_no <= total_loops ):
		

		workSpace = get_workspace(ws_type, set_param['ws_l'], set_param['ws_b'], set_param['obs_den'] )
		

		robots = []
		goals  = []

		
		if ws_type == 'replay':
			# all_start_loc = {'r0': (1, 2), 'r1': (3, 0), 'r2': (7, 5), 'r3': (5, 8)}
			# all_start_loc = {'r0': (18, 1), 'r1': (16, 34), 'r2': (11, 89), 'r3': (64, 49), 'r4': (5, 28), 'r5': (55, 50), 'r6': (65, 32), 'r7': (67, 20), 'r8': (43, 80), 'r9': (19, 52), 'r10': (28, 26), 'r11': (23, 41), 'r12': (26, 87), 'r13': (60, 73), 'r14': (72, 63), 'r15': (70, 37), 'r16': (67, 41), 'r17': (81, 15), 'r18': (60, 96), 'r19': (5, 89), 'r20': (88, 66), 'r21': (81, 26), 'r22': (55, 85), 'r23': (43, 50), 'r24': (72, 95), 'r25': (24, 19), 'r26': (88, 78), 'r27': (83, 41), 'r28': (66, 19), 'r29': (47, 9), 'r30': (50, 28), 'r31': (53, 62), 'r32': (93, 25), 'r33': (85, 8), 'r34': (55, 97), 'r35': (43, 70), 'r36': (86, 97), 'r37': (18, 68), 'r38': (75, 6), 'r39': (29, 73), 'r40': (41, 39), 'r41': (97, 74), 'r42': (30, 46), 'r43': (43, 19), 'r44': (78, 10), 'r45': (53, 72), 'r46': (35, 92), 'r47': (86, 5), 'r48': (83, 52), 'r49': (73, 94)}
			all_start_loc = {'r0': (66, 67), 'r1': (63, 93), 'r2': (13, 54), 'r3': (89, 80), 'r4': (40, 64), 'r5': (78, 97), 'r6': (43, 9), 'r7': (59, 38), 'r8': (28, 30), 'r9': (81, 22), 'r10': (17, 87), 'r11': (76, 32), 'r12': (75, 88), 'r13': (39, 89), 'r14': (12, 2), 'r15': (67, 32), 'r16': (91, 68), 'r17': (22, 50), 'r18': (3, 14), 'r19': (71, 56), 'r20': (22, 97), 'r21': (87, 74), 'r22': (6, 47), 'r23': (23, 0), 'r24': (48, 72), 'r25': (90, 53), 'r26': (55, 0), 'r27': (58, 53), 'r28': (36, 14), 'r29': (76, 81), 'r30': (63, 26), 'r31': (96, 61), 'r32': (31, 93), 'r33': (54, 69), 'r34': (89, 82), 'r35': (93, 21), 'r36': (18, 25), 'r37': (35, 16), 'r38': (34, 69), 'r39': (74, 95), 'r40': (13, 50), 'r41': (98, 51), 'r42': (91, 83), 'r43': (55, 26), 'r44': (80, 51), 'r45': (9, 80), 'r46': (51, 0), 'r47': (3, 72), 'r48': (6, 72), 'r49': (98, 40), 'r50': (67, 69), 'r51': (83, 2), 'r52': (13, 70), 'r53': (43, 61), 'r54': (21, 57), 'r55': (47, 39), 'r56': (58, 85), 'r57': (47, 45), 'r58': (13, 6), 'r59': (63, 57), 'r60': (17, 90), 'r61': (64, 64), 'r62': (4, 91), 'r63': (21, 13), 'r64': (24, 30), 'r65': (88, 57), 'r66': (72, 81), 'r67': (69, 40), 'r68': (26, 52), 'r69': (2, 73), 'r70': (10, 2), 'r71': (31, 12), 'r72': (49, 34), 'r73': (83, 64), 'r74': (31, 46), 'r75': (47, 18), 'r76': (89, 33), 'r77': (88, 45), 'r78': (15, 38), 'r79': (36, 1), 'r80': (62, 80), 'r81': (91, 57), 'r82': (32, 3), 'r83': (54, 66), 'r84': (70, 3), 'r85': (92, 67), 'r86': (5, 48), 'r87': (27, 92), 'r88': (95, 89), 'r89': (81, 52), 'r90': (1, 95), 'r91': (9, 89), 'r92': (72, 93), 'r93': (54, 49), 'r94': (4, 32), 'r95': (23, 64), 'r96': (47, 57), 'r97': (23, 22), 'r98': (61, 57), 'r99': (61, 99)}
			# all_start_loc = {'r0': (9, 182), 'r1': (71, 88), 'r2': (17, 83), 'r3': (115, 95), 'r4': (51, 36), 'r5': (179, 79), 'r6': (129, 18), 'r7': (17, 48), 'r8': (48, 84), 'r9': (136, 135), 'r10': (164, 93), 'r11': (191, 39), 'r12': (121, 100), 'r13': (18, 99), 'r14': (157, 114), 'r15': (114, 47), 'r16': (32, 127), 'r17': (192, 199), 'r18': (153, 60), 'r19': (101, 191), 'r20': (84, 172), 'r21': (113, 63), 'r22': (193, 92), 'r23': (199, 184), 'r24': (27, 2), 'r25': (26, 146), 'r26': (15, 22), 'r27': (120, 196), 'r28': (37, 154), 'r29': (169, 158), 'r30': (53, 171), 'r31': (85, 167), 'r32': (119, 54), 'r33': (77, 99), 'r34': (185, 89), 'r35': (31, 112), 'r36': (9, 145), 'r37': (4, 15), 'r38': (49, 157), 'r39': (166, 88), 'r40': (57, 167), 'r41': (133, 199), 'r42': (111, 11), 'r43': (24, 143), 'r44': (194, 172), 'r45': (158, 194), 'r46': (35, 91), 'r47': (164, 14), 'r48': (162, 161), 'r49': (169, 89), 'r50': (107, 37), 'r51': (163, 73), 'r52': (87, 99), 'r53': (73, 1), 'r54': (177, 92), 'r55': (128, 50), 'r56': (63, 160), 'r57': (192, 128), 'r58': (196, 128), 'r59': (189, 145), 'r60': (157, 143), 'r61': (47, 106), 'r62': (66, 133), 'r63': (103, 128), 'r64': (10, 20), 'r65': (85, 94), 'r66': (135, 180), 'r67': (192, 65), 'r68': (127, 191), 'r69': (98, 117), 'r70': (128, 117), 'r71': (106, 127), 'r72': (178, 169), 'r73': (152, 25), 'r74': (39, 24), 'r75': (198, 160), 'r76': (82, 97), 'r77': (136, 19), 'r78': (93, 80), 'r79': (3, 114), 'r80': (56, 30), 'r81': (136, 142), 'r82': (173, 41), 'r83': (28, 184), 'r84': (15, 39), 'r85': (142, 140), 'r86': (141, 30), 'r87': (32, 163), 'r88': (152, 23), 'r89': (180, 124), 'r90': (9, 72), 'r91': (183, 11), 'r92': (3, 119), 'r93': (156, 179), 'r94': (62, 192), 'r95': (182, 39), 'r96': (106, 55), 'r97': (30, 165), 'r98': (5, 129), 'r99': (3, 37)}
			# all_start_loc = {'r0': (96, 91), 'r1': (84, 79), 'r2': (33, 79), 'r3': (85, 11), 'r4': (79, 36), 'r5': (42, 25), 'r6': (68, 9), 'r7': (76, 59), 'r8': (83, 34), 'r9': (64, 0), 'r10': (4, 61), 'r11': (15, 14), 'r12': (70, 72), 'r13': (37, 87), 'r14': (51, 54), 'r15': (7, 96), 'r16': (20, 94), 'r17': (68, 57), 'r18': (67, 5), 'r19': (94, 28), 'r20': (63, 34), 'r21': (36, 74), 'r22': (21, 52), 'r23': (0, 44), 'r24': (82, 5), 'r25': (33, 93), 'r26': (25, 35), 'r27': (59, 63), 'r28': (84, 26), 'r29': (48, 23), 'r30': (54, 5), 'r31': (81, 16), 'r32': (94, 50), 'r33': (32, 47), 'r34': (93, 26), 'r35': (28, 16), 'r36': (97, 2), 'r37': (23, 54), 'r38': (36, 87), 'r39': (7, 76), 'r40': (28, 92), 'r41': (12, 29), 'r42': (62, 61), 'r43': (68, 95), 'r44': (18, 59), 'r45': (29, 36), 'r46': (22, 80), 'r47': (77, 36), 'r48': (74, 9), 'r49': (86, 16), 'r50': (61, 43), 'r51': (96, 16), 'r52': (93, 6), 'r53': (53, 53), 'r54': (18, 29), 'r55': (43, 68), 'r56': (59, 47), 'r57': (13, 95), 'r58': (87, 79), 'r59': (63, 94), 'r60': (13, 47), 'r61': (73, 51), 'r62': (91, 34), 'r63': (43, 96), 'r64': (61, 67), 'r65': (68, 23), 'r66': (59, 95), 'r67': (30, 4), 'r68': (29, 34), 'r69': (85, 16), 'r70': (18, 76), 'r71': (25, 99), 'r72': (86, 40), 'r73': (28, 94), 'r74': (72, 70), 'r75': (66, 45), 'r76': (52, 46), 'r77': (59, 29), 'r78': (55, 47), 'r79': (67, 13), 'r80': (93, 54), 'r81': (26, 16), 'r82': (45, 4), 'r83': (72, 44), 'r84': (65, 48), 'r85': (80, 45), 'r86': (37, 55), 'r87': (87, 66), 'r88': (11, 82), 'r89': (35, 75), 'r90': (6, 70), 'r91': (33, 86), 'r92': (14, 31), 'r93': (45, 57), 'r94': (54, 80), 'r95': (52, 18), 'r96': (95, 61), 'r97': (87, 97), 'r98': (75, 8), 'r99': (65, 85), 'r100': (8, 71), 'r101': (59, 70), 'r102': (44, 52), 'r103': (16, 20), 'r104': (65, 7), 'r105': (23, 83), 'r106': (51, 13), 'r107': (67, 87), 'r108': (89, 33), 'r109': (37, 15), 'r110': (98, 83), 'r111': (16, 22), 'r112': (23, 13), 'r113': (97, 65), 'r114': (62, 59), 'r115': (88, 49), 'r116': (4, 60), 'r117': (90, 82), 'r118': (85, 78), 'r119': (54, 48), 'r120': (79, 43), 'r121': (93, 22), 'r122': (48, 26), 'r123': (17, 40), 'r124': (91, 8), 'r125': (40, 14), 'r126': (66, 88), 'r127': (63, 92), 'r128': (71, 91), 'r129': (46, 8), 'r130': (26, 5), 'r131': (99, 9), 'r132': (33, 17), 'r133': (14, 49), 'r134': (59, 6), 'r135': (21, 80), 'r136': (3, 0), 'r137': (93, 9), 'r138': (84, 82), 'r139': (67, 60), 'r140': (33, 81), 'r141': (26, 88), 'r142': (67, 7), 'r143': (23, 28), 'r144': (9, 86), 'r145': (17, 9), 'r146': (68, 85), 'r147': (45, 99), 'r148': (21, 89), 'r149': (85, 34), 'r150': (46, 67), 'r151': (32, 78), 'r152': (37, 76), 'r153': (18, 99), 'r154': (75, 14), 'r155': (58, 93), 'r156': (20, 31), 'r157': (26, 97), 'r158': (72, 97), 'r159': (56, 44), 'r160': (18, 65), 'r161': (91, 51), 'r162': (84, 25), 'r163': (69, 81), 'r164': (97, 57), 'r165': (58, 42), 'r166': (1, 8), 'r167': (69, 29), 'r168': (19, 42), 'r169': (84, 78), 'r170': (22, 29), 'r171': (9, 25), 'r172': (10, 62), 'r173': (54, 40), 'r174': (28, 42), 'r175': (48, 15), 'r176': (63, 68), 'r177': (96, 5), 'r178': (64, 66), 'r179': (95, 51), 'r180': (47, 12), 'r181': (8, 0), 'r182': (29, 44), 'r183': (92, 95), 'r184': (95, 24), 'r185': (84, 37), 'r186': (94, 43), 'r187': (77, 34), 'r188': (97, 37), 'r189': (72, 29), 'r190': (2, 47), 'r191': (12, 10), 'r192': (71, 20), 'r193': (48, 93), 'r194': (1, 91), 'r195': (30, 41), 'r196': (87, 69), 'r197': (49, 80), 'r198': (95, 75), 'r199': (3, 1)}
			# all_start_loc = {'r0': (1, 2), 'r1': (3, 0), 'r2': (7, 5), 'r3': (5, 8)}
			# all_start_loc = {'r0': (94, 68), 'r1': (19, 80), 'r2': (22, 50), 'r3': (46, 71), 'r4': (21, 93), 'r5': (40, 96), 'r6': (60, 71), 'r7': (84, 89), 'r8': (1, 11), 'r9': (96, 88), 'r10': (30, 56), 'r11': (82, 24), 'r12': (82, 79), 'r13': (79, 22), 'r14': (19, 11), 'r15': (57, 74), 'r16': (93, 9), 'r17': (0, 22), 'r18': (27, 74), 'r19': (16, 57), 'r20': (35, 50), 'r21': (80, 30), 'r22': (47, 91), 'r23': (68, 61), 'r24': (16, 33), 'r25': (36, 84), 'r26': (0, 90), 'r27': (48, 41), 'r28': (12, 71), 'r29': (97, 78), 'r30': (18, 53), 'r31': (53, 40), 'r32': (6, 73), 'r33': (16, 90), 'r34': (60, 91), 'r35': (4, 5), 'r36': (79, 26), 'r37': (71, 33), 'r38': (22, 25), 'r39': (82, 38), 'r40': (42, 58), 'r41': (23, 81), 'r42': (31, 72), 'r43': (77, 54), 'r44': (25, 98), 'r45': (58, 35), 'r46': (90, 66), 'r47': (64, 11), 'r48': (89, 27), 'r49': (85, 33), 'r50': (44, 65), 'r51': (57, 63), 'r52': (44, 61), 'r53': (29, 2), 'r54': (95, 72), 'r55': (34, 22), 'r56': (66, 81), 'r57': (76, 53), 'r58': (62, 19), 'r59': (87, 63), 'r60': (35, 25), 'r61': (79, 91), 'r62': (31, 64), 'r63': (22, 92), 'r64': (37, 35), 'r65': (18, 89), 'r66': (13, 18), 'r67': (33, 71), 'r68': (52, 23), 'r69': (78, 77), 'r70': (9, 82), 'r71': (41, 49), 'r72': (11, 24), 'r73': (97, 29), 'r74': (83, 97), 'r75': (72, 21), 'r76': (48, 80), 'r77': (18, 56), 'r78': (41, 41), 'r79': (55, 70), 'r80': (89, 3), 'r81': (9, 1), 'r82': (55, 42), 'r83': (39, 60), 'r84': (15, 38), 'r85': (1, 49), 'r86': (91, 55), 'r87': (96, 7), 'r88': (25, 56), 'r89': (31, 51), 'r90': (47, 50), 'r91': (92, 42), 'r92': (96, 10), 'r93': (44, 38), 'r94': (63, 51), 'r95': (94, 52), 'r96': (28, 88), 'r97': (46, 51), 'r98': (91, 13), 'r99': (83, 4), 'r100': (51, 31), 'r101': (77, 32), 'r102': (83, 49), 'r103': (14, 61), 'r104': (55, 33), 'r105': (39, 25), 'r106': (84, 55), 'r107': (70, 5), 'r108': (94, 77), 'r109': (29, 74), 'r110': (81, 21), 'r111': (4, 0), 'r112': (71, 89), 'r113': (12, 98), 'r114': (28, 25), 'r115': (28, 6), 'r116': (33, 43), 'r117': (89, 28), 'r118': (51, 29), 'r119': (13, 49), 'r120': (39, 42), 'r121': (6, 97), 'r122': (80, 59), 'r123': (4, 71), 'r124': (56, 41), 'r125': (37, 22), 'r126': (28, 17), 'r127': (14, 60), 'r128': (71, 73), 'r129': (56, 47), 'r130': (73, 0), 'r131': (39, 5), 'r132': (28, 67), 'r133': (86, 31), 'r134': (32, 1), 'r135': (35, 31), 'r136': (10, 18), 'r137': (10, 30), 'r138': (99, 51), 'r139': (43, 3), 'r140': (2, 16), 'r141': (62, 37), 'r142': (12, 12), 'r143': (44, 54), 'r144': (92, 74), 'r145': (75, 8), 'r146': (66, 19), 'r147': (63, 26), 'r148': (60, 15), 'r149': (12, 19), 'r150': (97, 55), 'r151': (97, 27), 'r152': (51, 98), 'r153': (8, 74), 'r154': (1, 1), 'r155': (1, 84), 'r156': (58, 28), 'r157': (24, 19), 'r158': (34, 60), 'r159': (20, 22), 'r160': (4, 2), 'r161': (48, 75), 'r162': (3, 64), 'r163': (4, 68), 'r164': (13, 94), 'r165': (76, 79), 'r166': (16, 35), 'r167': (56, 66), 'r168': (63, 18), 'r169': (58, 86), 'r170': (78, 69), 'r171': (57, 73), 'r172': (13, 1), 'r173': (59, 80), 'r174': (74, 29), 'r175': (17, 68), 'r176': (60, 6), 'r177': (87, 10), 'r178': (4, 93), 'r179': (93, 39), 'r180': (20, 11), 'r181': (35, 68), 'r182': (13, 84), 'r183': (58, 88), 'r184': (22, 93), 'r185': (21, 32), 'r186': (46, 94), 'r187': (29, 36), 'r188': (19, 73), 'r189': (76, 82), 'r190': (86, 84), 'r191': (67, 9), 'r192': (11, 59), 'r193': (68, 94), 'r194': (33, 0), 'r195': (2, 42), 'r196': (98, 27), 'r197': (29, 20), 'r198': (68, 28), 'r199': (89, 39), 'r200': (43, 81), 'r201': (15, 68), 'r202': (38, 71), 'r203': (93, 16), 'r204': (15, 0), 'r205': (46, 74), 'r206': (30, 28), 'r207': (31, 68), 'r208': (80, 54), 'r209': (75, 78), 'r210': (78, 32), 'r211': (91, 6), 'r212': (87, 99), 'r213': (38, 54), 'r214': (84, 6), 'r215': (65, 24), 'r216': (51, 69), 'r217': (48, 44), 'r218': (24, 12), 'r219': (93, 69), 'r220': (2, 88), 'r221': (2, 21), 'r222': (72, 33), 'r223': (44, 22), 'r224': (76, 47), 'r225': (29, 39), 'r226': (92, 79), 'r227': (50, 51), 'r228': (59, 14), 'r229': (35, 28), 'r230': (35, 77), 'r231': (31, 29), 'r232': (43, 19), 'r233': (65, 69), 'r234': (2, 71), 'r235': (3, 90), 'r236': (21, 70), 'r237': (0, 62), 'r238': (1, 95), 'r239': (26, 64), 'r240': (75, 34), 'r241': (39, 21), 'r242': (97, 45), 'r243': (45, 37), 'r244': (26, 41), 'r245': (24, 6), 'r246': (96, 36), 'r247': (60, 46), 'r248': (12, 67), 'r249': (50, 91), 'r250': (67, 28), 'r251': (44, 0), 'r252': (86, 76), 'r253': (21, 53), 'r254': (86, 29), 'r255': (60, 81), 'r256': (4, 24), 'r257': (40, 47), 'r258': (48, 12), 'r259': (56, 59), 'r260': (67, 62), 'r261': (82, 84), 'r262': (33, 99), 'r263': (28, 21), 'r264': (80, 8), 'r265': (22, 79), 'r266': (90, 79), 'r267': (80, 75), 'r268': (88, 97), 'r269': (34, 75), 'r270': (17, 39), 'r271': (42, 67), 'r272': (80, 44), 'r273': (53, 86), 'r274': (44, 7), 'r275': (32, 37), 'r276': (50, 29), 'r277': (5, 46), 'r278': (92, 4), 'r279': (99, 17), 'r280': (65, 54), 'r281': (8, 45), 'r282': (54, 23), 'r283': (96, 83), 'r284': (18, 36), 'r285': (55, 38), 'r286': (42, 6), 'r287': (55, 49), 'r288': (31, 56), 'r289': (48, 65), 'r290': (70, 10), 'r291': (91, 48), 'r292': (61, 22), 'r293': (63, 68), 'r294': (54, 59), 'r295': (71, 74), 'r296': (85, 98), 'r297': (26, 89), 'r298': (1, 72), 'r299': (88, 6)}
			# all_start_loc = {'r0': (92, 68), 'r1': (245, 38), 'r2': (220, 67), 'r3': (36, 232), 'r4': (178, 123), 'r5': (5, 86), 'r6': (62, 102), 'r7': (236, 225), 'r8': (106, 239), 'r9': (20, 162), 'r10': (60, 142), 'r11': (241, 8), 'r12': (204, 85), 'r13': (232, 195), 'r14': (123, 19), 'r15': (78, 25), 'r16': (194, 203), 'r17': (245, 122), 'r18': (145, 76), 'r19': (145, 6), 'r20': (45, 81), 'r21': (59, 139), 'r22': (118, 238), 'r23': (90, 105), 'r24': (125, 108), 'r25': (210, 200), 'r26': (215, 18), 'r27': (20, 143), 'r28': (1, 101), 'r29': (49, 93), 'r30': (136, 29), 'r31': (206, 107), 'r32': (91, 239), 'r33': (227, 124), 'r34': (120, 188), 'r35': (55, 97), 'r36': (129, 217), 'r37': (172, 131), 'r38': (160, 198), 'r39': (147, 5), 'r40': (131, 49), 'r41': (44, 42), 'r42': (131, 250), 'r43': (35, 14), 'r44': (57, 20), 'r45': (160, 111), 'r46': (68, 202), 'r47': (204, 126), 'r48': (8, 19), 'r49': (158, 113), 'r50': (235, 170), 'r51': (42, 227), 'r52': (236, 80), 'r53': (227, 92), 'r54': (165, 121), 'r55': (185, 212), 'r56': (20, 254), 'r57': (144, 184), 'r58': (192, 88), 'r59': (98, 168), 'r60': (204, 205), 'r61': (22, 226), 'r62': (195, 164), 'r63': (6, 85), 'r64': (136, 114), 'r65': (221, 41), 'r66': (144, 172), 'r67': (235, 15), 'r68': (114, 82), 'r69': (97, 61), 'r70': (119, 103), 'r71': (29, 90), 'r72': (212, 100), 'r73': (103, 81), 'r74': (69, 44), 'r75': (61, 130), 'r76': (159, 66), 'r77': (193, 60), 'r78': (117, 70), 'r79': (37, 120), 'r80': (194, 161), 'r81': (125, 132), 'r82': (240, 164), 'r83': (142, 159), 'r84': (152, 147), 'r85': (26, 16), 'r86': (232, 194), 'r87': (100, 108), 'r88': (86, 60), 'r89': (89, 92), 'r90': (180, 70), 'r91': (72, 123), 'r92': (167, 175), 'r93': (72, 28), 'r94': (202, 138), 'r95': (122, 30), 'r96': (91, 114), 'r97': (221, 216), 'r98': (232, 219), 'r99': (113, 68)}
			
			# all_goal_loc = {'g0': (1, 5), 'g1': (4, 4), 'g2': (7, 2), 'g3': (7, 8)}
			# all_goal_loc = {'g0': (81, 83), 'g1': (91, 42), 'g2': (79, 15), 'g3': (6, 12), 'g4': (57, 19), 'g5': (15, 22), 'g6': (1, 6), 'g7': (67, 95), 'g8': (4, 68), 'g9': (70, 53), 'g10': (25, 93), 'g11': (87, 40), 'g12': (66, 82), 'g13': (36, 99), 'g14': (52, 60), 'g15': (96, 32), 'g16': (84, 76), 'g17': (86, 14), 'g18': (32, 90), 'g19': (62, 15), 'g20': (52, 2), 'g21': (52, 57), 'g22': (73, 64), 'g23': (29, 15), 'g24': (29, 94), 'g25': (21, 21), 'g26': (46, 34), 'g27': (65, 11), 'g28': (29, 53), 'g29': (48, 48), 'g30': (40, 98), 'g31': (51, 50), 'g32': (79, 79), 'g33': (48, 56), 'g34': (78, 76), 'g35': (93, 93), 'g36': (65, 7), 'g37': (57, 89), 'g38': (34, 47), 'g39': (90, 52), 'g40': (72, 3), 'g41': (59, 38), 'g42': (81, 38), 'g43': (88, 61), 'g44': (28, 0), 'g45': (62, 89), 'g46': (24, 74), 'g47': (24, 43), 'g48': (40, 68), 'g49': (42, 4), 'g50': (19, 55), 'g51': (47, 46), 'g52': (19, 62), 'g53': (57, 53), 'g54': (82, 62), 'g55': (68, 38), 'g56': (48, 65), 'g57': (13, 4), 'g58': (25, 22), 'g59': (65, 48), 'g60': (4, 35), 'g61': (20, 98), 'g62': (9, 59), 'g63': (81, 54), 'g64': (54, 80), 'g65': (97, 84), 'g66': (65, 2), 'g67': (70, 63), 'g68': (26, 41), 'g69': (82, 69), 'g70': (56, 74), 'g71': (38, 35), 'g72': (21, 69), 'g73': (59, 3), 'g74': (65, 13), 'g75': (30, 65), 'g76': (4, 80), 'g77': (30, 92), 'g78': (92, 71), 'g79': (43, 59), 'g80': (46, 95), 'g81': (56, 98), 'g82': (37, 68), 'g83': (87, 86), 'g84': (56, 26), 'g85': (55, 86), 'g86': (0, 60), 'g87': (26, 6), 'g88': (58, 20), 'g89': (32, 92), 'g90': (49, 49), 'g91': (79, 62), 'g92': (45, 32), 'g93': (49, 16), 'g94': (15, 99), 'g95': (47, 82), 'g96': (23, 56), 'g97': (29, 19), 'g98': (3, 21), 'g99': (37, 37)}
			all_goal_loc = {'g0': (92, 47), 'g1': (30, 35), 'g2': (63, 96), 'g3': (83, 80), 'g4': (93, 45), 'g5': (89, 30), 'g6': (0, 3), 'g7': (96, 13), 'g8': (48, 13), 'g9': (64, 90), 'g10': (24, 8), 'g11': (44, 39), 'g12': (89, 95), 'g13': (16, 96), 'g14': (45, 14), 'g15': (27, 72), 'g16': (47, 52), 'g17': (72, 98), 'g18': (82, 4), 'g19': (39, 72), 'g20': (66, 6), 'g21': (26, 72), 'g22': (5, 60), 'g23': (36, 67), 'g24': (60, 57), 'g25': (87, 58), 'g26': (74, 87), 'g27': (25, 91), 'g28': (68, 13), 'g29': (95, 27), 'g30': (17, 38), 'g31': (45, 86), 'g32': (75, 35), 'g33': (45, 83), 'g34': (49, 47), 'g35': (71, 33), 'g36': (21, 89), 'g37': (46, 36), 'g38': (96, 85), 'g39': (18, 69), 'g40': (10, 94), 'g41': (4, 42), 'g42': (12, 37), 'g43': (50, 22), 'g44': (15, 10), 'g45': (55, 39), 'g46': (95, 12), 'g47': (20, 42), 'g48': (5, 10), 'g49': (26, 64), 'g50': (98, 52), 'g51': (18, 73), 'g52': (56, 93), 'g53': (28, 21), 'g54': (82, 29), 'g55': (69, 99), 'g56': (98, 3), 'g57': (5, 89), 'g58': (5, 27), 'g59': (26, 93), 'g60': (54, 71), 'g61': (51, 76), 'g62': (61, 74), 'g63': (13, 92), 'g64': (59, 9), 'g65': (37, 39), 'g66': (49, 63), 'g67': (72, 60), 'g68': (0, 44), 'g69': (55, 55), 'g70': (58, 47), 'g71': (76, 6), 'g72': (12, 88), 'g73': (86, 33), 'g74': (1, 31), 'g75': (58, 12), 'g76': (11, 91), 'g77': (4, 11), 'g78': (3, 48), 'g79': (87, 25), 'g80': (93, 79), 'g81': (27, 74), 'g82': (95, 85), 'g83': (80, 32), 'g84': (59, 97), 'g85': (62, 8), 'g86': (94, 26), 'g87': (35, 82), 'g88': (39, 80), 'g89': (57, 73), 'g90': (44, 95), 'g91': (77, 75), 'g92': (84, 51), 'g93': (68, 28), 'g94': (67, 22), 'g95': (30, 10), 'g96': (13, 38), 'g97': (25, 16), 'g98': (17, 68), 'g99': (20, 81)}
			# all_goal_loc = {'g0': (166, 0), 'g1': (157, 87), 'g2': (74, 67), 'g3': (59, 49), 'g4': (95, 52), 'g5': (31, 130), 'g6': (164, 83), 'g7': (124, 57), 'g8': (93, 146), 'g9': (110, 14), 'g10': (174, 13), 'g11': (160, 59), 'g12': (182, 35), 'g13': (25, 157), 'g14': (134, 20), 'g15': (129, 198), 'g16': (129, 186), 'g17': (104, 10), 'g18': (94, 93), 'g19': (146, 88), 'g20': (49, 184), 'g21': (194, 74), 'g22': (63, 173), 'g23': (47, 166), 'g24': (88, 25), 'g25': (50, 27), 'g26': (144, 195), 'g27': (55, 95), 'g28': (108, 123), 'g29': (131, 150), 'g30': (28, 150), 'g31': (9, 160), 'g32': (187, 49), 'g33': (162, 71), 'g34': (59, 144), 'g35': (9, 142), 'g36': (115, 172), 'g37': (156, 161), 'g38': (164, 27), 'g39': (72, 198), 'g40': (14, 34), 'g41': (129, 144), 'g42': (100, 61), 'g43': (12, 116), 'g44': (122, 29), 'g45': (138, 87), 'g46': (113, 162), 'g47': (134, 156), 'g48': (133, 99), 'g49': (40, 151), 'g50': (188, 21), 'g51': (65, 125), 'g52': (30, 5), 'g53': (31, 143), 'g54': (114, 118), 'g55': (81, 12), 'g56': (23, 106), 'g57': (13, 55), 'g58': (31, 23), 'g59': (86, 9), 'g60': (47, 149), 'g61': (15, 121), 'g62': (127, 80), 'g63': (40, 5), 'g64': (176, 174), 'g65': (126, 76), 'g66': (46, 80), 'g67': (189, 120), 'g68': (4, 89), 'g69': (82, 104), 'g70': (104, 71), 'g71': (126, 102), 'g72': (78, 0), 'g73': (9, 141), 'g74': (49, 141), 'g75': (163, 135), 'g76': (124, 195), 'g77': (127, 48), 'g78': (134, 127), 'g79': (198, 18), 'g80': (91, 187), 'g81': (144, 109), 'g82': (75, 62), 'g83': (185, 158), 'g84': (24, 78), 'g85': (174, 28), 'g86': (96, 47), 'g87': (79, 180), 'g88': (181, 105), 'g89': (165, 137), 'g90': (138, 132), 'g91': (42, 188), 'g92': (26, 168), 'g93': (119, 92), 'g94': (8, 109), 'g95': (103, 147), 'g96': (5, 7), 'g97': (113, 157), 'g98': (140, 47), 'g99': (64, 80)}
			# all_goal_loc = {'g0': (74, 29), 'g1': (69, 71), 'g2': (27, 61), 'g3': (79, 96), 'g4': (65, 30), 'g5': (36, 46), 'g6': (69, 72), 'g7': (5, 74), 'g8': (53, 27), 'g9': (10, 69), 'g10': (25, 85), 'g11': (84, 21), 'g12': (12, 73), 'g13': (3, 22), 'g14': (69, 43), 'g15': (14, 56), 'g16': (90, 42), 'g17': (52, 70), 'g18': (14, 63), 'g19': (41, 29), 'g20': (92, 32), 'g21': (37, 47), 'g22': (49, 39), 'g23': (22, 1), 'g24': (1, 70), 'g25': (17, 43), 'g26': (26, 46), 'g27': (43, 69), 'g28': (78, 21), 'g29': (86, 9), 'g30': (70, 49), 'g31': (1, 88), 'g32': (66, 37), 'g33': (58, 48), 'g34': (39, 19), 'g35': (49, 50), 'g36': (15, 82), 'g37': (64, 33), 'g38': (25, 14), 'g39': (50, 89), 'g40': (78, 62), 'g41': (84, 31), 'g42': (44, 27), 'g43': (86, 12), 'g44': (21, 37), 'g45': (58, 21), 'g46': (77, 37), 'g47': (40, 54), 'g48': (77, 70), 'g49': (32, 24), 'g50': (35, 47), 'g51': (17, 1), 'g52': (39, 76), 'g53': (84, 5), 'g54': (88, 2), 'g55': (2, 55), 'g56': (41, 65), 'g57': (62, 70), 'g58': (91, 36), 'g59': (28, 38), 'g60': (5, 59), 'g61': (22, 65), 'g62': (37, 33), 'g63': (97, 6), 'g64': (61, 90), 'g65': (22, 90), 'g66': (78, 15), 'g67': (45, 7), 'g68': (0, 74), 'g69': (74, 56), 'g70': (27, 89), 'g71': (0, 45), 'g72': (42, 43), 'g73': (68, 30), 'g74': (37, 14), 'g75': (90, 98), 'g76': (23, 42), 'g77': (96, 61), 'g78': (59, 97), 'g79': (83, 98), 'g80': (59, 28), 'g81': (5, 40), 'g82': (55, 57), 'g83': (93, 61), 'g84': (70, 1), 'g85': (36, 97), 'g86': (9, 46), 'g87': (35, 25), 'g88': (64, 69), 'g89': (72, 10), 'g90': (1, 84), 'g91': (29, 96), 'g92': (40, 69), 'g93': (35, 12), 'g94': (4, 89), 'g95': (46, 53), 'g96': (81, 80), 'g97': (9, 7), 'g98': (11, 23), 'g99': (45, 33), 'g100': (32, 33), 'g101': (70, 17), 'g102': (8, 7), 'g103': (98, 54), 'g104': (41, 94), 'g105': (59, 21), 'g106': (55, 10), 'g107': (13, 18), 'g108': (8, 81), 'g109': (27, 65), 'g110': (62, 89), 'g111': (87, 76), 'g112': (93, 20), 'g113': (46, 76), 'g114': (94, 64), 'g115': (33, 31), 'g116': (65, 20), 'g117': (11, 71), 'g118': (16, 8), 'g119': (41, 50), 'g120': (76, 83), 'g121': (70, 4), 'g122': (43, 44), 'g123': (38, 44), 'g124': (47, 7), 'g125': (55, 19), 'g126': (13, 81), 'g127': (47, 63), 'g128': (46, 1), 'g129': (78, 48), 'g130': (96, 88), 'g131': (55, 16), 'g132': (30, 16), 'g133': (73, 6), 'g134': (3, 31), 'g135': (49, 29), 'g136': (56, 88), 'g137': (47, 30), 'g138': (61, 83), 'g139': (4, 68), 'g140': (53, 84), 'g141': (18, 52), 'g142': (24, 79), 'g143': (36, 8), 'g144': (89, 88), 'g145': (3, 45), 'g146': (77, 40), 'g147': (63, 78), 'g148': (89, 94), 'g149': (92, 30), 'g150': (3, 21), 'g151': (82, 70), 'g152': (2, 8), 'g153': (24, 25), 'g154': (68, 98), 'g155': (95, 94), 'g156': (47, 86), 'g157': (69, 23), 'g158': (29, 1), 'g159': (21, 71), 'g160': (20, 95), 'g161': (34, 2), 'g162': (58, 29), 'g163': (54, 88), 'g164': (26, 96), 'g165': (38, 0), 'g166': (59, 72), 'g167': (17, 27), 'g168': (3, 70), 'g169': (2, 71), 'g170': (96, 62), 'g171': (9, 62), 'g172': (86, 50), 'g173': (37, 45), 'g174': (65, 77), 'g175': (67, 36), 'g176': (97, 7), 'g177': (44, 93), 'g178': (99, 98), 'g179': (16, 42), 'g180': (62, 4), 'g181': (21, 1), 'g182': (44, 33), 'g183': (24, 96), 'g184': (90, 40), 'g185': (93, 44), 'g186': (22, 89), 'g187': (53, 29), 'g188': (30, 56), 'g189': (87, 28), 'g190': (64, 42), 'g191': (37, 42), 'g192': (87, 68), 'g193': (81, 39), 'g194': (35, 74), 'g195': (76, 41), 'g196': (71, 27), 'g197': (88, 32), 'g198': (97, 54), 'g199': (67, 3)}
			# all_goal_loc = {'g0': (1, 5), 'g1': (4, 4), 'g2': (7, 2), 'g3': (7, 8)}
			# all_goal_loc = {'g0': (25, 9), 'g1': (31, 16), 'g2': (14, 45), 'g3': (95, 64), 'g4': (70, 42), 'g5': (87, 71), 'g6': (39, 8), 'g7': (24, 21), 'g8': (28, 44), 'g9': (11, 4), 'g10': (84, 40), 'g11': (83, 65), 'g12': (97, 31), 'g13': (58, 22), 'g14': (43, 24), 'g15': (19, 60), 'g16': (4, 28), 'g17': (96, 98), 'g18': (46, 85), 'g19': (28, 61), 'g20': (72, 15), 'g21': (81, 37), 'g22': (24, 2), 'g23': (51, 57), 'g24': (79, 75), 'g25': (54, 32), 'g26': (39, 97), 'g27': (92, 72), 'g28': (73, 63), 'g29': (52, 47), 'g30': (15, 67), 'g31': (81, 9), 'g32': (82, 21), 'g33': (74, 6), 'g34': (96, 82), 'g35': (62, 80), 'g36': (81, 31), 'g37': (25, 28), 'g38': (15, 18), 'g39': (51, 46), 'g40': (3, 67), 'g41': (94, 59), 'g42': (53, 46), 'g43': (79, 3), 'g44': (21, 87), 'g45': (95, 26), 'g46': (26, 81), 'g47': (4, 27), 'g48': (60, 92), 'g49': (49, 91), 'g50': (14, 54), 'g51': (74, 52), 'g52': (74, 89), 'g53': (16, 46), 'g54': (32, 12), 'g55': (10, 32), 'g56': (96, 29), 'g57': (74, 25), 'g58': (72, 53), 'g59': (23, 43), 'g60': (99, 20), 'g61': (69, 5), 'g62': (70, 15), 'g63': (72, 27), 'g64': (75, 13), 'g65': (35, 18), 'g66': (92, 96), 'g67': (29, 77), 'g68': (52, 15), 'g69': (17, 31), 'g70': (62, 75), 'g71': (11, 20), 'g72': (5, 11), 'g73': (5, 95), 'g74': (40, 99), 'g75': (82, 82), 'g76': (90, 40), 'g77': (86, 90), 'g78': (34, 71), 'g79': (9, 98), 'g80': (30, 14), 'g81': (17, 15), 'g82': (83, 21), 'g83': (26, 23), 'g84': (99, 6), 'g85': (33, 73), 'g86': (1, 68), 'g87': (57, 72), 'g88': (68, 77), 'g89': (61, 44), 'g90': (19, 83), 'g91': (16, 65), 'g92': (57, 17), 'g93': (96, 53), 'g94': (11, 57), 'g95': (11, 17), 'g96': (70, 47), 'g97': (58, 26), 'g98': (26, 27), 'g99': (45, 82), 'g100': (12, 27), 'g101': (50, 47), 'g102': (75, 66), 'g103': (49, 43), 'g104': (98, 67), 'g105': (88, 20), 'g106': (41, 55), 'g107': (23, 13), 'g108': (19, 0), 'g109': (95, 67), 'g110': (8, 24), 'g111': (47, 82), 'g112': (74, 35), 'g113': (41, 52), 'g114': (11, 61), 'g115': (29, 8), 'g116': (37, 48), 'g117': (4, 16), 'g118': (97, 21), 'g119': (74, 31), 'g120': (24, 26), 'g121': (9, 64), 'g122': (17, 63), 'g123': (62, 86), 'g124': (84, 75), 'g125': (52, 64), 'g126': (77, 23), 'g127': (48, 91), 'g128': (99, 34), 'g129': (61, 1), 'g130': (23, 62), 'g131': (20, 82), 'g132': (12, 29), 'g133': (92, 60), 'g134': (50, 31), 'g135': (53, 12), 'g136': (37, 18), 'g137': (67, 18), 'g138': (0, 49), 'g139': (85, 65), 'g140': (21, 97), 'g141': (45, 43), 'g142': (53, 77), 'g143': (48, 10), 'g144': (62, 95), 'g145': (70, 21), 'g146': (5, 97), 'g147': (93, 73), 'g148': (53, 84), 'g149': (93, 7), 'g150': (26, 65), 'g151': (69, 89), 'g152': (75, 12), 'g153': (40, 49), 'g154': (66, 39), 'g155': (44, 53), 'g156': (52, 55), 'g157': (25, 86), 'g158': (62, 13), 'g159': (11, 46), 'g160': (88, 57), 'g161': (4, 13), 'g162': (27, 42), 'g163': (23, 98), 'g164': (26, 90), 'g165': (24, 85), 'g166': (17, 64), 'g167': (61, 81), 'g168': (84, 16), 'g169': (28, 93), 'g170': (78, 52), 'g171': (40, 5), 'g172': (37, 3), 'g173': (36, 69), 'g174': (40, 24), 'g175': (2, 3), 'g176': (97, 4), 'g177': (22, 64), 'g178': (78, 21), 'g179': (64, 25), 'g180': (47, 48), 'g181': (37, 9), 'g182': (68, 90), 'g183': (72, 86), 'g184': (6, 2), 'g185': (1, 50), 'g186': (0, 56), 'g187': (85, 19), 'g188': (44, 89), 'g189': (46, 9), 'g190': (74, 41), 'g191': (98, 1), 'g192': (77, 19), 'g193': (31, 32), 'g194': (42, 18), 'g195': (32, 52), 'g196': (55, 34), 'g197': (71, 22), 'g198': (78, 39), 'g199': (91, 18), 'g200': (5, 41), 'g201': (89, 51), 'g202': (65, 37), 'g203': (46, 4), 'g204': (7, 67), 'g205': (49, 5), 'g206': (74, 27), 'g207': (59, 31), 'g208': (46, 95), 'g209': (53, 4), 'g210': (13, 78), 'g211': (90, 24), 'g212': (63, 11), 'g213': (68, 12), 'g214': (40, 19), 'g215': (16, 50), 'g216': (13, 30), 'g217': (83, 14), 'g218': (1, 20), 'g219': (56, 33), 'g220': (67, 89), 'g221': (82, 66), 'g222': (29, 64), 'g223': (48, 82), 'g224': (12, 5), 'g225': (98, 50), 'g226': (22, 1), 'g227': (25, 7), 'g228': (96, 99), 'g229': (77, 77), 'g230': (63, 56), 'g231': (8, 50), 'g232': (35, 1), 'g233': (62, 76), 'g234': (8, 10), 'g235': (33, 35), 'g236': (95, 20), 'g237': (56, 61), 'g238': (68, 80), 'g239': (28, 26), 'g240': (98, 58), 'g241': (84, 47), 'g242': (0, 0), 'g243': (18, 32), 'g244': (35, 90), 'g245': (31, 20), 'g246': (8, 53), 'g247': (41, 84), 'g248': (41, 15), 'g249': (52, 9), 'g250': (78, 64), 'g251': (19, 40), 'g252': (90, 74), 'g253': (69, 41), 'g254': (92, 86), 'g255': (79, 61), 'g256': (7, 21), 'g257': (15, 48), 'g258': (57, 39), 'g259': (3, 38), 'g260': (70, 33), 'g261': (57, 60), 'g262': (78, 48), 'g263': (46, 86), 'g264': (71, 42), 'g265': (51, 6), 'g266': (67, 91), 'g267': (37, 36), 'g268': (91, 30), 'g269': (85, 84), 'g270': (67, 2), 'g271': (93, 94), 'g272': (55, 56), 'g273': (25, 73), 'g274': (73, 52), 'g275': (89, 32), 'g276': (51, 87), 'g277': (0, 89), 'g278': (59, 24), 'g279': (0, 93), 'g280': (17, 81), 'g281': (9, 52), 'g282': (87, 60), 'g283': (77, 72), 'g284': (17, 52), 'g285': (64, 97), 'g286': (36, 18), 'g287': (84, 58), 'g288': (86, 92), 'g289': (3, 74), 'g290': (65, 45), 'g291': (71, 7), 'g292': (68, 59), 'g293': (23, 69), 'g294': (77, 99), 'g295': (99, 16), 'g296': (22, 23), 'g297': (88, 90), 'g298': (60, 51), 'g299': (89, 69)}
			# all_goal_loc = {'g0': (231, 112), 'g1': (142, 183), 'g2': (170, 83), 'g3': (223, 173), 'g4': (199, 79), 'g5': (53, 28), 'g6': (158, 22), 'g7': (61, 144), 'g8': (95, 168), 'g9': (95, 136), 'g10': (28, 195), 'g11': (209, 234), 'g12': (186, 16), 'g13': (200, 21), 'g14': (118, 28), 'g15': (91, 77), 'g16': (26, 162), 'g17': (166, 179), 'g18': (67, 137), 'g19': (163, 133), 'g20': (216, 218), 'g21': (232, 202), 'g22': (178, 124), 'g23': (20, 222), 'g24': (30, 226), 'g25': (38, 219), 'g26': (135, 134), 'g27': (193, 106), 'g28': (137, 141), 'g29': (158, 192), 'g30': (223, 248), 'g31': (77, 158), 'g32': (226, 93), 'g33': (133, 43), 'g34': (166, 129), 'g35': (218, 188), 'g36': (4, 190), 'g37': (203, 6), 'g38': (218, 29), 'g39': (198, 70), 'g40': (50, 172), 'g41': (69, 32), 'g42': (180, 27), 'g43': (155, 165), 'g44': (2, 89), 'g45': (156, 138), 'g46': (140, 169), 'g47': (125, 47), 'g48': (240, 139), 'g49': (88, 116), 'g50': (154, 74), 'g51': (160, 224), 'g52': (115, 26), 'g53': (234, 45), 'g54': (3, 185), 'g55': (247, 138), 'g56': (179, 193), 'g57': (228, 214), 'g58': (158, 30), 'g59': (63, 142), 'g60': (98, 120), 'g61': (224, 57), 'g62': (106, 2), 'g63': (34, 16), 'g64': (163, 174), 'g65': (186, 147), 'g66': (34, 82), 'g67': (245, 150), 'g68': (33, 139), 'g69': (33, 99), 'g70': (161, 55), 'g71': (243, 49), 'g72': (17, 210), 'g73': (13, 219), 'g74': (168, 173), 'g75': (58, 135), 'g76': (112, 28), 'g77': (28, 121), 'g78': (217, 156), 'g79': (3, 95), 'g80': (55, 105), 'g81': (19, 114), 'g82': (219, 173), 'g83': (171, 163), 'g84': (53, 81), 'g85': (198, 20), 'g86': (180, 55), 'g87': (171, 219), 'g88': (141, 122), 'g89': (19, 166), 'g90': (144, 237), 'g91': (10, 202), 'g92': (90, 10), 'g93': (206, 24), 'g94': (160, 81), 'g95': (35, 32), 'g96': (210, 135), 'g97': (225, 37), 'g98': (164, 150), 'g99': (135, 45)}


			no_of_robots = len(all_start_loc)
			no_of_goals = len(all_goal_loc)

			for i in range(no_of_robots):
				robots.append('r' + str(i))

			for j in range(no_of_goals):
				goals.append('g' + str(j))
		
		
		else:
			
		
			for i in range(no_of_robots):
				robots.append('r' + str(i))

			for j in range(no_of_goals):
				goals.append('g' + str(j))
				
		
			# Fetching start locations of all robots and goal locations of all tasks 

			if ws_type == '3D':
				all_start_loc, all_goal_loc = get_initial_locations_3D(robots, goals, workSpace)
			else:
				all_start_loc, all_goal_loc = get_initial_locations_2D(robots, goals, workSpace)


		
		# exec_id = ws_type + '_r' + str(loop_no)
		set_name = str(workSpace.shape[0]) + '_' + str(no_of_robots) + '_' + str(no_of_goals) + '_' + str(set_param['obs_den']) 
		exec_id = set_name + '_r' + str(loop_no)
		
		ws_fname =   results_folder_name + 'ws_' + exec_id  + '.txt'   # this is filename in which workSpace would be saved
		log_fname = results_folder_name + 'log_' + exec_id  + '.txt'   # this is filename in which all output would be saved
		
		logf = open(log_fname, 'w')
		

		
		print("Execution ID: ", exec_id, file=logf)	
		print("-----------------------------------------------------------------------------------------\n", file=logf)
		print("Initial details: \n", file=logf)
		
		if ws_type == '3D':
			print("WorkSpace size: ", workSpace.shape[0], "*", workSpace.shape[1], "*", workSpace.shape[2], file=logf)
		else:
			print("WorkSpace size: ", workSpace.shape[0], "*", workSpace.shape[1], file=logf)

		if ws_type == 'random':
			print("Obstacle density: ", set_param['obs_den'], "%", file=logf)

		print("Number of robots: ", no_of_robots, file=logf)
		print("Number of goals: ", no_of_goals, file=logf)
		
		print("-----------------------------------------------------------------------------------------\n", file=logf)
		

				
		print("Initial location of robots : ", all_start_loc, file=logf)
		print("\nLocation of goals / tasks  : ", all_goal_loc, file=logf)
		print("\n", file=logf)
		
		logf.close()
		logf = open(log_fname, 'a')

		if ws_type == 'random':
			np.savetxt( ws_fname, workSpace, fmt='%d' )




		if verbosity > 0:
			print("\nWorkspace is ready")

		

		
		'''
			----------------------------------------------------------------------------------------------------------
			--------            --------          Processing section starts           ---------              ---------   
			----------------------------------------------------------------------------------------------------------
						
			There are 2 cases:
				Case 1  : Heuristic approach     : Mixed (A & H) cost => Base is H.cost, but few cells have A.cost 
												   (i.e. min H.costs for each robot are replaced by A.cost)
				Case 2  : Non-heuristic approach : Purely A.cost => All entries in the cost-matrix are actual costs

			Executing HEUR and NAIVE (or Actual) cases sequentially, so that comparison can be made for same set of 
			obstacles, start_locs, goal_locs etc.
			
			First, we execute the HEUR version followed by the ACTUAL version

			----------------------------------------------------------------------------------------------------------
		'''
		

		
		print("\n\n-----------------------------------------------------------------------------------------", file=logf)
		print("                                 HEUR case begins ", file=logf)
		print("-----------------------------------------------------------------------------------------\n\n", file=logf)
		


		total_Htime = 0
		
		

		t_h_1 = time.time()
		
		# # Invoking function for HEUR case
		# ----------------------------------------------------------------------------------------------------------------------------------------
		result_h, total_cost_h, path_h, u_count_h, no_of_exp_h = heuristic_approach.heuristic ( no_of_robots, no_of_goals, workSpace, all_start_loc, all_goal_loc, ws_type )
		# ----------------------------------------------------------------------------------------------------------------------------------------

		t_h_2 = time.time()


		if u_count_h > 0:
			if verbosity > 0:
				print("Found trapped robot/goal... retrying...\n")
			continue




		total_Htime = (t_h_2 - t_h_1)
		total_Htime = float( format( total_Htime, '.2f' ) )
		

		print("Printing results for HEUR case: ", file=logf)
		print("-------------------------------\n", file=logf)
		print("Time taken for HEUR case: ", total_Htime, "seconds", file=logf)
		print("No of robot-goal paths explored in HEUR case: ", no_of_exp_h, file=logf)
		print("Total cost for HEUR case: ", total_cost_h, file=logf)
		print("Number of goals (or robots) unassigned for HEUR case: ", u_count_h, file=logf)
		print("\nDetailed result of assignment: ", file=logf)
		print("-------------------------------\n", file=logf)
		print(result_h, file=logf)
		

		print("\nPrinting all paths: ", file=logf)
		print("-------------------\n", file=logf)
		
		
		for res in result_h:
			print("\nPath for ", res[0][0], " to ", res[0][1], ":", file=logf)
			print( path_h [res[0][0]] [res[0][1]], file=logf )  # res[0][0] is robot, and res[0][1] is goal
		
		
		print("\n\n-----------------------------------------------------------------------------------------", file=logf)
		print("                                 HEUR case completed ", file=logf)
		print("-----------------------------------------------------------------------------------------\n\n", file=logf)
		

		if verbosity > 0:
			print("\nExecution of our approach completed")
			print("\nStarting execution of Baseline with Dijsktra's algo\n")




		print("\n\n-----------------------------------------------------------------------------------------", file=logf)
		print("                                NAIVE case begins ", file=logf)
		print("-----------------------------------------------------------------------------------------\n\n", file=logf)
		
			

		total_Atime = 0


		t_a_1 = time.time()

		# Invoking function for NAIVE case
		# ------------------------------------------------------------------------------------------------------------------------------
		result, total_cost, path, u_count, no_of_exp = naive_approach.naive( no_of_robots, no_of_goals, workSpace, all_start_loc, all_goal_loc, ws_type, verbosity )
		# ------------------------------------------------------------------------------------------------------------------------------

		
		'''
		if no_of_exp == -1:  # Means there was a break from the called function Naive due to ASTAR taking too much time
			print("\n------------------BREAK---------------------------\n", file=logf)
			print("Time taken by NAIVE case is more than 30 minutes\n", file=logf )
			
			ws_fname =   results_folder_name + 'BAD_ws_' + exec_id  + '.txt'   # this is filename in which workSpace would be saved
			if ws_type != '3D':
				np.savetxt( ws_fname, workSpace, fmt='%d' )
				print("Workspace saved in file: ", ws_fname, file=logf)
			print("------------------------------------\n", file=logf)

			logf.close()

			log_new_fname = results_folder_name + 'Bad_log_' + exec_id  + '.txt'
			os.rename( log_fname, log_new_fname )

			continue
		'''



		t_a_2 = time.time()


		total_Atime = (t_a_2 - t_a_1)
		total_Atime = float( format( total_Atime, '.2f' ) )
		
		
		print("\nPrinting results for NAIVE case: ", file=logf)
		print("--------------------------------\n", file=logf)
		print("Time taken for NAIVE case: ", total_Atime, "seconds", file=logf)
		print("No of robot-goal paths explored in NAIVE case: ", no_of_exp, file=logf)
		print("Total cost for NAIVE case: ", total_cost, file=logf)
		print("Number of goals (or robots) unassigned for NAIVE case: ", u_count, file=logf)
		print("\nDetailed result of assignment: ", file=logf)
		print("-------------------------------\n", file=logf)
		print(result, file=logf)
		

		# print("\nPrinting all paths: ", file=logf)
		# print("-------------------\n", file=logf)
		
		# for res in result:
		# 	print("\nPath for ", res[0][0], " to ", res[0][1], ":", file=logf)
		# 	print( path [res[0][0]] [res[0][1]], file=logf )  # res[0][0] is robot, and res[0][1] is goal

		
		print("\n\n-----------------------------------------------------------------------------------------", file=logf)
		print("                               NAIVE case completed ", file=logf)
		print("-----------------------------------------------------------------------------------------\n\n", file=logf)
		


		if verbosity > 0:
			print("\nExecution of baseline completed")


		print("-------------------", file=logf)
		print("-------------------", file=logf)
		print("    Conclusion: ", file=logf)
		print("-------------------", file=logf)
		print("-------------------\n", file=logf)
		
		print("\nTime taken for HEUR case (seconds):", file=logf)
		print(total_Htime, file=logf)
		print("No of robot-goal paths explored in HEUR case: ", no_of_exp_h, file=logf)
		print("Total cost for HEUR case: ", total_cost_h, file=logf)

		print("\nTime taken for NAIVE case (seconds): ", file=logf)
		print(total_Atime, file=logf)
		print("No of robot-goal paths explored in NAIVE case: ", no_of_exp, file=logf)
		print("Total cost for NAIVE case: ", total_cost, file=logf)
		print("----------------------------------------------", file=logf)



		if ws_type == 'random':
			# np.savetxt( ws_fname, workSpace, fmt='%d' )
			print("\n----------------------------------------------", file=logf)
			print("Workspace saved in file ", ws_fname, file=logf)
		print("----------------------------------------------\n", file=logf)
		
		logf.close()
		collect_times_taken_H.append( total_Htime )
		collect_times_taken_A.append( total_Atime )

		collect_no_of_exp_H.append( no_of_exp_h )
		collect_no_of_exp_A.append( no_of_exp )

		collect_total_cost_H.append( total_cost_h )
		collect_total_cost_A.append( total_cost )

		
		if verbosity > 0:
			print("\nRound ", loop_no, " completed - - - - - - - - - - - - - - - \n")
		loop_no = loop_no + 1


	# Summarizing

	time_h_mean = float( format( np.mean( collect_times_taken_H ), '.2f' ) )
	# time_h_var  = float( format( np.var( collect_times_taken_H ), '.2f' ) )
	time_h_std  = float( format( np.std( collect_times_taken_H ), '.2f' ) )
	
	time_n_mean = float( format( np.mean( collect_times_taken_A ), '.2f' ) )
	# time_n_var  = float( format( np.var( collect_times_taken_A ), '.2f' ) )
	time_n_std  = float( format( np.std( collect_times_taken_A ), '.2f' ) )


	
	exp_h_mean  = float( format( np.mean( collect_no_of_exp_H ), '.2f' ) )
	# exp_h_var   = float( format( np.var( collect_no_of_exp_H ), '.2f' ) )
	exp_h_std   = float( format( np.std( collect_no_of_exp_H ), '.2f' ) )

	exp_n_mean  = float( format( np.mean( collect_no_of_exp_A ), '.2f' ) )
	# exp_n_var   = float( format( np.var( collect_no_of_exp_A ), '.2f' ) )
	exp_n_std   = float( format( np.std( collect_no_of_exp_A ), '.2f' ) )


	
	cost_h_mean = float( format( np.mean( collect_total_cost_H ), '.2f' ) )
	# cost_h_var  = float( format( np.var( collect_total_cost_H ), '.2f' ) )
	cost_h_std  = float( format( np.std( collect_total_cost_H ), '.2f' ) )

	cost_n_mean = float( format( np.mean( collect_total_cost_A ), '.2f' ) )
	# cost_n_var  = float( format( np.var( collect_total_cost_A ), '.2f' ) )
	cost_n_std  = float( format( np.std( collect_total_cost_A ), '.2f' ) )


	
	netResult_filename = results_folder_name + 'netResult.txt'
	logf_netResult = open(netResult_filename, 'a')
	print( "----------------------------------------------------------", file=logf_netResult )
	print( "Set : ", set_name, file=logf_netResult )
	print( "----------------------------------------------------------", file=logf_netResult )
	print( "Average of run-times for HEUR case (in seconds): ", time_h_mean, file=logf_netResult )
	# print( "Variance of run-times for HEUR case (in seconds squared): ", time_h_var, file=logf_netResult )
	print( "Standard deviation of run-times for HEUR case (in seconds): ", time_h_std, file=logf_netResult )

	print( "\nAverage of run-times for NAIVE case with Dijsktra's algo (in seconds): ", time_n_mean, file=logf_netResult )
	# print( "Variance of run-times for NAIVE case with Dijsktra's algo (in seconds squared): ", time_n_var, file=logf_netResult )
	print( "Standard deviation of run-times for NAIVE case with Dijsktra's algo (in seconds): ", time_n_std, file=logf_netResult )



	print( "\n\nAverage number of explorations for HEUR case: ", exp_h_mean, file=logf_netResult )
	# print( "Variance of number of explorations for HEUR case: ", exp_h_var, file=logf_netResult )
	print( "Standard deviation of number of explorations for HEUR case: ", exp_h_std, file=logf_netResult )

	print( "\nAverage number of explorations for NAIVE case with Dijsktra's algo: ", exp_n_mean, file=logf_netResult )
	# print( "Variance of number of explorations for NAIVE case with Dijsktra's algo: ", exp_n_var, file=logf_netResult )
	print( "Standard deviation of number of explorations for NAIVE case with Dijsktra's algo: ", exp_n_std, file=logf_netResult )



	print( "\n\nAverage cost for HEUR case: ", cost_h_mean, file=logf_netResult )
	# print( "Variance of cost for HEUR case: ", cost_h_var, file=logf_netResult )
	print( "Standard deviation of cost for HEUR case: ", cost_h_std, file=logf_netResult )

	print( "\nAverage cost for NAIVE case with Dijsktra's algo: ", cost_n_mean, file=logf_netResult )
	# print( "Variance of cost for NAIVE case: ", cost_n_var, file=logf_netResult )
	print( "Standard deviation of cost for NAIVE case with Dijsktra's algo: ", cost_n_std, file=logf_netResult )



	print( "----------------------------------------------------------\n\n", file=logf_netResult )
	logf_netResult.close()



	print("Algo1 runtimes:\n", file=log_grouped_data)

	for tt_h in collect_times_taken_H:
		print(tt_h, file=log_grouped_data)

	
	print("\nBaseline runtimes:\n", file=log_grouped_data)
	
	for tt_n in collect_times_taken_A:
		print(tt_n, file=log_grouped_data)

	
	print("\nAlgo1 no of exp:\n", file=log_grouped_data)
	
	for texp_h in collect_no_of_exp_H:
		print(texp_h, file=log_grouped_data)


	log_grouped_data.close()




	return_time_h = ( time_h_mean, time_h_std )
	return_time_n = ( time_n_mean, time_n_std )

	return_exp_h = ( exp_h_mean, exp_h_std )
	return_exp_n = ( exp_n_mean, exp_n_std )


	return return_time_h, return_time_n, return_exp_h, return_exp_n


	
	

def main():

	# Preparation for running code for multiple times with varied input settings. 

	global results_folder_name

	
	
	
	settings = {}
	

	workspace_length = 0
	workspace_width = 0
	obs_density = 0
	n_o_r = 0
	n_o_g = 0


	print("\n\n________________________________________________\n")
	print("\t\tW E L C O M E")
	print("________________________________________________\n")


	while True:
		
		print("\n\n________________________________________________\n")
		print("Following are the supported types of workspaces:\n")

		print("1. Random workspace")
		print("2. Standard workspace")
		print("3. Replay past execution")
		
		print("________________________________________________\n")

		try:
			choice = int(input("\nPlease select the workspace type or press 9 to exit: "))
		except ValueError:
			print("\nThat's not a number! Please retry...")
			continue

		if choice == 9:
			break
		
		
		
		if choice == 1:
			ws_type = 'random'

			print("\n\nPlease enter the following details --")
			workspace_length = int(input("\n\tLength of workspace: "))
			workspace_width  = int(input("\n\tWidth of workspace: "))

			obs_density  = int(input("\n\tObstacle density: "))


		elif choice == 2:

			print(" \nThese are standard workspaces supported:\n")

			print("1. Boston")
			print("2. Paris")
			print("3. Sydney")
			print("4. Shanghai")
			print("5. Warehouse")
			print("6. Mansion")
			print("7. Den")
			print("8. 3D Warframe")
			

			try:
				choice_b = int(input("\nPlease select the standard workspace or press 9 to exit: "))
			except ValueError:
				print("\nThat's not a number! Please retry...")
				continue

			if choice_b == 9:
				break


			if choice_b == 1:
				ws_type = 'boston'

			elif choice_b == 2:
				ws_type = 'paris'

			elif choice_b == 3:
				ws_type = 'sydney'
			
			elif choice_b == 4:
				ws_type = 'shanghai'

			elif choice_b == 5:
				ws_type = 'warehouse'

			elif choice_b == 6:
				ws_type = 'mansion'

			elif choice_b == 7:
				ws_type = 'den'

			elif choice_b == 8:
				ws_type = '3D'

			# elif choice_b == 7:
			# 	ws_type = 'replay'


			else:
				print("\n\nInvalid choice, please retry...")
				continue

			print("\nPlease enter the following details --")
		
		elif choice == 3:
			ws_type = 'replay'
		
		else:
			print("\n\nInvalid choice, please retry...")
			continue


		if choice != 3:
			n_o_r = int(input("\n\tNumber of robots: "))
			n_o_g = int(input("\n\tNumber of goals: "))


		total_loops = int(input("\n\tNumber of rounds for which experiment should run: "))
		results_folder_name = input("\n\tRelative folder name to store result files: ")
		results_folder_name = results_folder_name + '/'
		Path(results_folder_name).mkdir(exist_ok=True)
		verbosity = int(input("\n\tPlease select the verbosity level(0, 1, or 2): "))
		print("\n-------------------------------------------------------------\n")



		settings[ 'main_set'  ] = { 'ws_l': workspace_length, 'ws_b': workspace_width, 'n_o_r': n_o_r, 'n_o_g': n_o_g, 'obs_den': obs_density, 'total_loops': total_loops,'ws_type': ws_type, 'verbosity': verbosity }	


		print("Thank you for the inputs, execution has started...\n")
		print("-------------------------------------------------------------\n")

		execute_set( settings['main_set'] )

		print("-------------------------------------------------------------\n")
		print("Execution for given inputs completed...Restarting...\n")
		print("-------------------------------------------------------------\n")
	

	print("\n_______________________________")
	print("\nExecution completed, thank you!")
	print("_______________________________\n\n")



if __name__ == '__main__':
    main()

